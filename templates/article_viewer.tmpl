<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ .title }}</title>
</head>
<script>
    const root = {{ .API_ROOT }};
    const timestamp = {{ .timestamp }};
    const userID = {{ .localUserID }};
    const articleID = {{ .articleID }};

    const currentYear = new Date().toDateString().split(' ')[3];
    let date = new Date(Date.parse(timestamp)).toDateString().split(' ');
    date = `${date[1]} ${date[2]}` + (date[3] === currentYear ? `` : `, ${date[3]}`);

    window.onload = () => document.getElementById('timestamp').innerHTML = date;

    function onFavorite() {
        const bookMark = document.getElementById("bookMark");
            fetch("/favorite", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    userID: userID,
                    articleID: articleID,
                }),
            }).then(res => res.json())
            .then(res => {
                if(res.status === 200) {
                    if(bookMark.src === "http://localhost:8080/assets/filledBookMark.png") {
                        bookMark.src = "http://localhost:8080/assets/emptyBookMark.png";
                    } else {
                        bookMark.src = "http://localhost:8080/assets/filledBookMark.png";
                    } 
                } 
            })
    }

    const authorUsername = {{ .authorUsername }};
    const signedInUsername = {{ .signedInUsername }};

    function createCommentElement(commentUsername, commentContent, id) {
        const root = document.createElement('div');
        const username = document.createElement('a');
        username.classList.add('commentUsername');
        username.innerHTML = commentUsername;
        username.href = `/${commentUsername}`;
        root.appendChild(username);

        const content = document.createElement('div');
        content.classList.add('commentContent');
        content.innerHTML = commentContent;
        root.appendChild(content);

        root.id = id;
        root.classList.add('comment');

        return root;
    }

    function createReplyButton(id) {
        const reply = document.createElement('div');
        reply.id = id;
        reply.onclick = function() {
            createReply(this.id);
            document.getElementById(id).removeChild(this);
        }

        reply.innerHTML = "reply";
        reply.classList.add('replyButton');

        return reply;
    }

    function postComment() {
        const content = document.getElementById('commentInput').value;
        const data = {
            "userid": userID,  
            "articleid": {{ .articleID }},
            "parentid": null,
            "content": content,
        }
        fetch("/comments", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(res => res.json())
        .then(res => {
            const comment = createCommentElement(signedInUsername, res.content, res.comment_id);
            comment.appendChild(createReplyButton(res.comment_id));

            const container = document.getElementById('commentContainer');
            container.insertBefore(comment, container.childNodes[0]);

            document.getElementById('commentInput').value = '';
            commentInputChange();
        })
    }

    function createReply(id) {
        const commentElement = document.getElementById(id);

        const replyInput = document.createElement('textarea');
        replyInput.id = "replyInput";
        replyInput.classList.add('commentInput');
        replyInput.placeholder = 'Write a reply';

        const actionsWrapper = document.createElement('div');
        actionsWrapper.classList.add('actionsWrapper');
        actionsWrapper.appendChild(replyInput);

        const actions = document.createElement('div');

        const submitReply = document.createElement('span');
        submitReply.classList.add('actionButton');
        submitReply.innerHTML = "Submit";
        submitReply.onclick = function() {
            postReplyComment(id); 
            commentElement.removeChild(actionsWrapper);
            commentElement.insertBefore(createReplyButton(id), commentElement.childNodes[2]);
        }

        const cancelButton = document.createElement('span');
        cancelButton.classList.add('actionButton');
        cancelButton.innerHTML = "Cancel";
        cancelButton.onclick = function() {
            commentElement.removeChild(actionsWrapper);
            commentElement.insertBefore(createReplyButton(id), commentElement.childNodes[2]);
        }

        actionsWrapper.appendChild(cancelButton);
        actionsWrapper.appendChild(submitReply);

        commentElement.insertBefore(actionsWrapper, commentElement.childNodes[3]); // indexing with a constant is gross; it'd be nice if we could make this better
    }

    function postReplyComment(id) {
        const content = document.getElementById("replyInput").value;
        
        const data = {
            "userid": userID,  
            "articleid": {{ .articleID }},
            "parentid": parseInt(id),
            "content": content,
        }
        fetch("/comments", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(res => res.json())
        .then(res => {
            const e = createCommentElement(signedInUsername, res.content, res.comment_id);

            const parent = document.getElementById(id);
            parent.insertBefore(e, parent.childNodes[3]);

            e.appendChild(createReplyButton(res.comment_id));
        })
    }

    function getComments() {
        const articleID = {{ .articleID }};

        fetch(`/comments/?articleID=${articleID}`, {
        method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
        })
        .then(res => res.json())
        .then(res => {
            for(var i = 0; i < res.comments.length; i++) {
                dfs(res.comments[i]);
            }
        })
    }

    function dfs(comment) {
        const username = comment.Comment.Username;
        const content = comment.Comment.Comment.content;
        const id = comment.Comment.Comment.commentid;

        const commentElement = createCommentElement(username, content, id);
        commentElement.appendChild(createReplyButton(id));
        
        if (comment.Comment.Comment.parentid == null) {
            document.getElementById('commentContainer').appendChild(commentElement);
        } else {
            document.getElementById(comment.Comment.Comment.parentid).appendChild(commentElement);
        }

        if (comment.Children.length > 0) {
            for(var i = 0; i < comment.Children.length; i++) {
                dfs(comment.Children[i]);
            }
        } 
    }

    function commentInputChange() {
        const value = document.getElementById('commentInput').value;
        let cover = document.getElementById('postCommentCover');

        if (value.length > 0) {
            cover.style.width = '0';
        }
        else {
            cover.style.width = '100%';
        }
    }

    getComments();
</script>
<style>
    .authorFlex {
        display: flex;
        justify-content: space-between;
    }
</style>
<link rel="stylesheet" href="/styles/root.css">
<link rel="stylesheet" href="/styles/profile.css">
<link rel="stylesheet" href="/styles/article_viewer.css">
<body class="flexWrapperVertical">
    {{ template "header.tmpl" .}}

    <div class="flexWrapper pageContentsScroll flexLeft">
        <div class="pageTitle articleTitle">{{ .title }}</div>
        <div class="articleSubtitle">{{ .subtitle }}</div>
        <div class="styledFont author">
            <div class="styledFont marginBottom"><a class="authorLink" href="/{{ .authorUsername }}">{{ .authorUsername }}</a></div>
        </div>
        <div class="styledFont author authorFlex separator">
            <span class="styledFont timestamp" style="align-self:end;" id="timestamp"></span>

            {{if .alreadyFavorited}}
            <img onclick=onFavorite() id="bookMark" class="bookmark" src="http://localhost:8080/assets/filledBookMark.png" alt="favorite">
            {{else}}
            <img onclick=onFavorite() id="bookMark" class="bookmark" src="http://localhost:8080/assets/emptyBookMark.png" alt="favorite">
            {{end}}
        </div>
        <div class="articleBody">
            {{ range $c := .content }}
                <p>{{ $c }}</p>
            {{ end }}
        </div>

        <div class="commentsWrapper">
            <textarea class="commentInput" id="commentInput" placeholder="Write a comment" oninput="commentInputChange()"></textarea>
            <div style="position:relative;">
                <div class="postComment" id="postComment" onclick="postComment()">Post Comment</div>
                <div class="postCommentCover" id="postCommentCover"></div>
            </div>
            <div class="commentContainer" id="commentContainer"></div>
        </div>
    </div>

</body>
</html>

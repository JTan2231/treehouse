<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ .title }}</title>
</head>
<script>
    const root = {{ .API_ROOT }};
    const timestamp = {{ .timestamp }};
    const userID = {{ .localUserID }};
    const articleID = {{ .articleID }};

    const currentYear = new Date().toDateString().split(' ')[3];
    let date = new Date(Date.parse(timestamp)).toDateString().split(' ');
    date = `${date[1]} ${date[2]}` + (date[3] === currentYear ? `` : `, ${date[3]}`);

    window.onload = () => document.getElementById('timestamp').innerHTML = date;

    function onFavorite() {
        const bookMark = document.getElementById("bookMark");
            fetch("/favorite", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    userID: userID,
                    articleID: articleID,
                }),
            }).then(res => res.json())
            .then(res => {
                if(res.status === 200) {
                    if(bookMark.src === "http://localhost:8080/assets/filledBookMark.png") {
                        bookMark.src = "http://localhost:8080/assets/emptyBookMark.png";
                    } else {
                        bookMark.src = "http://localhost:8080/assets/filledBookMark.png";
                    } 
                } 
            })
    }

    const authorUsername = {{ .authorUsername }};
    const localUsername = {{ .localUsername }};

    function postComment() {
        const content = document.querySelector("input").value;
        const data = {
            "userid": userID,  
            "articleid": {{ .articleID }},
            "parentid": null,
            "content": content,
        }
        fetch("/comments", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(res => res.json())
        .then(res => {
            const e = document.createElement('p');
            e.innerHTML = localUsername + ": " + res.content;
            e.id = res.comment_id;
            document.body.appendChild(e);

            const reply = document.createElement('button');
            reply.id = res.comment_id;
            reply.onclick = function() {
                createReply(this.id);
            }
            reply.innerHTML = "reply";
            e.appendChild(reply);
        })
    }

    function createReply(id) {
        const commentElement = document.getElementById(id);

        const replyInput = document.createElement('input');
        replyInput.id = "replyInput";
        replyInput.classList.add("commentReply");
        commentElement.appendChild(replyInput);


        const submitReply = document.createElement('button');
        submitReply.innerHTML = "Submit";


        const cancelButton = document.createElement('button');
        cancelButton.innerHTML = "Cancel";
        cancelButton.onclick = function() {
            commentElement.removeChild(replyInput);
            commentElement.removeChild(submitReply);
            commentElement.removeChild(cancelButton);
        }

        commentElement.appendChild(submitReply);
        commentElement.appendChild(cancelButton);

        submitReply.onclick = function() {
            postReplyComment(id); 
            commentElement.removeChild(replyInput);
            commentElement.removeChild(submitReply);
            commentElement.removeChild(cancelButton);
        }
    }

    function postReplyComment(id) {
        const content = document.getElementById("replyInput").value;
        
        const data = {
            "userid": userID,  
            "articleid": {{ .articleID }},
            "parentid": parseInt(id),
            "content": content,
        }
        fetch("/comments", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(res => res.json())
        .then(res => {
            const e = document.createElement('p');
            e.innerHTML = localUsername + ": " + content;
            e.classList.add("commentReply");
        
            e.id = res.comment_id;
            document.getElementById(id).appendChild(e);

            const reply = document.createElement('button');
            reply.id = res.comment_id;
            reply.onclick = function() {
                createReply(this.id);
            }
            reply.innerHTML = "reply";
            e.appendChild(reply);
        })
    }

    function getComments() {
        const articleID = {{ .articleID }};

        fetch(`/comments/?articleID=${articleID}`, {
        method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
        })
        .then(res => res.json())
        .then(res => {
            for(var i = 0; i < res.comments.length; i++) {
                dfs(res.comments[i]);
            }
        })
    }

    function dfs(comment) {
        const e = document.createElement('p');
        e.innerHTML = comment.Comment.Username + ": " + comment.Comment.Comment.content;
        e.id = comment.Comment.Comment.commentid;

        const reply = document.createElement('button');
        reply.innerHTML = "reply";
        reply.id = comment.Comment.Comment.commentid;
        reply.onclick = function() {
            createReply(this.id);
        }
        e.appendChild(reply);
        

        if(comment.Comment.Comment.parentid == null) {
            document.body.appendChild(e);
        } else {
            document.getElementById(comment.Comment.Comment.parentid).appendChild(e);
            e.classList.add("commentReply");
        }

        if(comment.Children.length > 0) {
            for(var i = 0; i < comment.Children.length; i++) {
                dfs(comment.Children[i]);
            }
        } 
    }      
    getComments();
</script>
<style>
    .authorFlex {
        display: flex;
        justify-content: space-between;
    }
</style>
<link rel="stylesheet" href="/styles/root.css">
<link rel="stylesheet" href="/styles/article_viewer.css">
<body class="flexWrapperVertical">
    {{ template "header.tmpl" .}}

    <div class="flexWrapper pageContentsScroll flexLeft">
        <div class="pageTitle articleTitle">{{ .title }}</div>
        <div class="articleSubtitle">{{ .subtitle }}</div>
        <div class="styledFont author">
            <div class="styledFont marginBottom"><a class="authorLink" href="/{{ .authorUsername }}">{{ .authorUsername }}</a></div>
        </div>
        <div class="styledFont author authorFlex separator">
            <span class="styledFont timestamp" style="align-self:end;" id="timestamp"></span>

            {{if .alreadyFavorited}}
            <img onclick=onFavorite() id="bookMark" class="bookmark" src="http://localhost:8080/assets/filledBookMark.png" alt="favorite">
            {{else}}
            <img onclick=onFavorite() id="bookMark" class="bookmark" src="http://localhost:8080/assets/emptyBookMark.png" alt="favorite">
            {{end}}
        </div>
        <div class="articleBody">
            {{ range $c := .content }}
                <p>{{ $c }}</p>
            {{ end }}
        </div>
    </div>

    <input placeholder="test comments"></input>
    <button onclick="postComment()">Post Comment</button>
</body>
</html>
